<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
                 当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="false" scanPeriod="10 seconds">
    <contextName>logback</contextName>

    <springProperty scope="context" name="APP_NAME" source="spring.application.name"/>
    <property name="LOG_HOME" value="logs/${APP_NAME}"/>

    <!-- 彩色日志依赖的渲染类 -->
    <!--    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />-->
    <!--    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />-->
    <!--    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />-->
    <!-- 彩色日志格式 -->
    <!--    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(-&#45;&#45;){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>-->

    <!--1. 输出到控制台-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--此日志appender是为开发使用，只配置最低级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
        <encoder>

            　　　　　　　
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>

            　　　　
        </encoder>

    </appender>

    <!--    &lt;!&ndash; 2. 输出到文件  &ndash;&gt;-->
    <!--    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
    <!--        &lt;!&ndash; 当前记录的日志文档完整路径 &ndash;&gt;-->
    <!--        <file>${LOG_HOME}/log.log</file>-->
    <!--        &lt;!&ndash;日志文档输出格式&ndash;&gt;-->
    <!--        <encoder>-->
    <!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} -%5level -&#45;&#45;[%15.15thread] %-40.40logger{39} : %msg%n%n</pattern>-->
    <!--            <charset>UTF-8</charset> &lt;!&ndash; 此处设置字符集 &ndash;&gt;-->
    <!--        </encoder>-->
    <!--        &lt;!&ndash; 日志记录器的滚动策略，按日期，按大小记录 &ndash;&gt;-->
    <!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
    <!--            <fileNamePattern>${LOG_HOME}/%d{yyyy-MM-dd}.%i.log</fileNamePattern>-->
    <!--            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
    <!--                <maxFileSize>100MB</maxFileSize>-->
    <!--            </timeBasedFileNamingAndTriggeringPolicy>-->
    <!--            &lt;!&ndash;日志文档保留天数（非持续运行情况下，15天外不会清理）&ndash;&gt;-->
    <!--            <maxHistory>15</maxHistory>-->
    <!--            &lt;!&ndash; 应对服务非持续偶尔运行，日志清理机制无法触发而导致日志得不到清理的情况&ndash;&gt;-->
    <!--            <totalSizeCap>500MB</totalSizeCap>-->
    <!--            <cleanHistoryOnStart>true</cleanHistoryOnStart>-->
    <!--        </rollingPolicy>-->
    <!--    </appender>-->


    <!-- 本地环境输出至控制台 -->
    <!-- 如果使用了 springProfile, 需要将logback.xml名称改为logback-spring.xml-->
    <root level="DEBUG">
        <appender-ref ref="CONSOLE"/>
        <!--            <appender-ref ref="FILE" />-->
    </root>

</configuration>